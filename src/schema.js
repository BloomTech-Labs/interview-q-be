const { gql } = require('apollo-server')

const typeDefs = gql`
  # The Query type lists all the different queries (Retrieve operations) that front-end can make from this Endpoint
  type Query {
    interviewQinfo: String!
    posts: [Post!]!
    post(id: String!): Post!
    industries: [Industry]!
    industry(name: String!): [Post!]!
  }

# ***************************************************

  # The Mutation type lists all the different CUD (Create, Update, Delete) operations that front-end can make from this Endpoint
  type Mutation {
    createPost(
      price: Int!
      position: String!
      industryName: String!
      description: String!
    ): Post!

    deletePost(id: String!): Post!
    
    updatePost(
      id: String!
      price: Int
      position: String
      industryName: String
      description: String
    ): Post!
  }

# ***************************************************

  # All of the types below are ones that we create and are what make up the different tables in our Prisma database.
  
  # Every created type needs an ID, which will be a random string of characters generated by Prisma
  
  #The datamodel.prisma file should match this part, although that file includes @id for every primary key ID
  type Post {
      id: ID!
      price: Int!
      position: String!
      
      # A post is connected to one industry. We connect them via a String of the unique name of the industry
      # An alternate method could be connecting them via ID, but since both are unique, we chose name
      industry: Industry!
      description: String!
      
      # coachId: ID!
      # ratingsId: ID!
      # tags: String!
  }

  type Industry {
    id: ID!
    name: String!
    posts: [Post]!
  }
`;

module.exports = typeDefs;